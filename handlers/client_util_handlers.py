from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import initializer
from handlers import admin_handlers
from transaction import RecordTransactions


async def help_command_message(message: types.Message):
    await message.answer(
        "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?\n\n"
        "–ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è/squats 100 - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π\n"
        "–æ—Ç–∂–∏–º–∞–Ω–∏—è/push_ups 100 - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
        "/my_statistic - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/statistic - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")


class ClientUtilsHandler:
    record_transactions = RecordTransactions()
    top_p_men = "–¢–æ–ø –æ—Ç–∂–∏–º–∞–Ω–∏—è –º—É–∂—á–∏–Ω—ã"
    top_p_women = "–¢–æ–ø –æ—Ç–∂–∏–º–∞–Ω–∏—è –∂–µ–Ω—â–∏–Ω—ã"
    top_s_men = "–¢–æ–ø –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è –º—É–∂—á–∏–Ω—ã"
    top_s_women = "–¢–æ–ø –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è –∂–µ–Ω—â–∏–Ω—ã"

    async def help_command_handler(self, message: types.Message):
        if message.from_user.id == message.chat.id:
            await help_command_message(message)
        if str(message.from_user.id) in [initializer.super_admin, initializer.admin1, initializer.admin2]:
            await admin_handlers.help_admin_command_message(message)

    async def my_statistic_handler(self, message: types.Message):
        user_id = message.from_user.id
        if user_id == message.chat.id:
            own_push_ups = self.record_transactions.get_common_user_result(user_id, 1)
            own_squats = self.record_transactions.get_common_user_result(user_id, 2)
            text = ""
            if own_push_ups:
                text += str(own_push_ups) + " –æ—Ç–∂–∏–º–∞–Ω–∏—èüëä\n"
            if own_squats:
                text += "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è: " + str(own_squats) + " ü¶ø\n"
            if own_push_ups:
                text += "–õ–∏—á–Ω—ã–π –≤–∫–ª–∞–¥: " + str(own_push_ups) + "/" + str(initializer.push_ups_goal) + " –æ—Ç–∂–∏–º–∞–Ω–∏–πüëä\n"
            if own_squats:
                text += "–õ–∏—á–Ω—ã–π –≤–∫–ª–∞–¥: " + str(own_squats) + "/" + str(initializer.squats_goal) + " ü¶ø"
            if own_push_ups is None and own_squats is None:
                text = "–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –î–æ–±–∞–≤—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
            await message.answer(text)

    async def statistic_handler(self, message: types.Message):
        user_id = message.from_user.id
        if user_id == message.chat.id:
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(InlineKeyboardButton(self.top_p_men, callback_data="top_p_men"),
                         InlineKeyboardButton(self.top_p_women, callback_data="top_p_women"))
            keyboard.add(InlineKeyboardButton(self.top_s_men, callback_data="top_s_men"),
                         InlineKeyboardButton(self.top_s_women, callback_data="top_s_women"))
            push_ups_result = str(self.record_transactions.get_common_result(1))
            squats_result = str(self.record_transactions.get_common_result(2))
            text = "–ù–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n–û—Ç–∂–∏–º–∞–Ω–∏—è: " + push_ups_result + " –¶–µ–ª—å: " + str(
                initializer.push_ups_goal) + " üëä\n–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è: " + squats_result + " –¶–µ–ª—å: " + str(
                initializer.squats_goal) + " ü¶ø"
            await message.answer(text, reply_markup=keyboard)

    async def push_ups_men(self, callback: types.CallbackQuery):
        await callback.message.answer(
            "<b>" + self.top_p_men + "üëä</b>\n\n" + self.record_transactions.get_top(callback.from_user.id, 1, 1),
            parse_mode="HTML")

    async def push_ups_women(self, callback: types.CallbackQuery):
        await callback.message.answer(
            "<b>" + self.top_p_women + "üëä</b>\n\n" + self.record_transactions.get_top(callback.from_user.id, 1, 2),
            parse_mode="HTML")

    async def squats_men(self, callback: types.CallbackQuery):
        await callback.message.answer(
            "<b>" + self.top_s_men + "ü¶ø</b>\n\n" + self.record_transactions.get_top(callback.from_user.id, 2, 1),
            parse_mode="HTML")

    async def squats_women(self, callback: types.CallbackQuery):
        await callback.message.answer(
            "<b>" + self.top_s_women + "ü¶ø</b>\n\n" + self.record_transactions.get_top(callback.from_user.id, 2, 2),
            parse_mode="HTML")
